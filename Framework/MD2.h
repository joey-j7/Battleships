#pragma once

#include "Model.h"

#define MD2_MAGIC 844121161 // IPD2
#define MD2_VERSION 8

/*
 *	anorms.h - Predifined MD2 Normals
 */

static const float Anorms[162][3] =
{
	{ -0.525731f, 0.000000f, 0.850651f }, 
	{ -0.442863f, 0.238856f, 0.864188f }, 
	{ -0.295242f, 0.000000f, 0.955423f }, 
	{ -0.309017f, 0.500000f, 0.809017f }, 
	{ -0.162460f, 0.262866f, 0.951056f }, 
	{ 0.000000f, 0.000000f, 1.000000f }, 
	{ 0.000000f, 0.850651f, 0.525731f }, 
	{ -0.147621f, 0.716567f, 0.681718f }, 
	{ 0.147621f, 0.716567f, 0.681718f }, 
	{ 0.000000f, 0.525731f, 0.850651f }, 
	{ 0.309017f, 0.500000f, 0.809017f }, 
	{ 0.525731f, 0.000000f, 0.850651f }, 
	{ 0.295242f, 0.000000f, 0.955423f }, 
	{ 0.442863f, 0.238856f, 0.864188f }, 
	{ 0.162460f, 0.262866f, 0.951056f }, 
	{ -0.681718f, 0.147621f, 0.716567f }, 
	{ -0.809017f, 0.309017f, 0.500000f }, 
	{ -0.587785f, 0.425325f, 0.688191f }, 
	{ -0.850651f, 0.525731f, 0.000000f }, 
	{ -0.864188f, 0.442863f, 0.238856f }, 
	{ -0.716567f, 0.681718f, 0.147621f }, 
	{ -0.688191f, 0.587785f, 0.425325f }, 
	{ -0.500000f, 0.809017f, 0.309017f }, 
	{ -0.238856f, 0.864188f, 0.442863f }, 
	{ -0.425325f, 0.688191f, 0.587785f }, 
	{ -0.716567f, 0.681718f, -0.147621f }, 
	{ -0.500000f, 0.809017f, -0.309017f }, 
	{ -0.525731f, 0.850651f, 0.000000f }, 
	{ 0.000000f, 0.850651f, -0.525731f }, 
	{ -0.238856f, 0.864188f, -0.442863f }, 
	{ 0.000000f, 0.955423f, -0.295242f }, 
	{ -0.262866f, 0.951056f, -0.162460f }, 
	{ 0.000000f, 1.000000f, 0.000000f }, 
	{ 0.000000f, 0.955423f, 0.295242f }, 
	{ -0.262866f, 0.951056f, 0.162460f }, 
	{ 0.238856f, 0.864188f, 0.442863f }, 
	{ 0.262866f, 0.951056f, 0.162460f }, 
	{ 0.500000f, 0.809017f, 0.309017f }, 
	{ 0.238856f, 0.864188f, -0.442863f }, 
	{ 0.262866f, 0.951056f, -0.162460f }, 
	{ 0.500000f, 0.809017f, -0.309017f }, 
	{ 0.850651f, 0.525731f, 0.000000f }, 
	{ 0.716567f, 0.681718f, 0.147621f }, 
	{ 0.716567f, 0.681718f, -0.147621f }, 
	{ 0.525731f, 0.850651f, 0.000000f }, 
	{ 0.425325f, 0.688191f, 0.587785f }, 
	{ 0.864188f, 0.442863f, 0.238856f }, 
	{ 0.688191f, 0.587785f, 0.425325f }, 
	{ 0.809017f, 0.309017f, 0.500000f }, 
	{ 0.681718f, 0.147621f, 0.716567f }, 
	{ 0.587785f, 0.425325f, 0.688191f }, 
	{ 0.955423f, 0.295242f, 0.000000f }, 
	{ 1.000000f, 0.000000f, 0.000000f }, 
	{ 0.951056f, 0.162460f, 0.262866f }, 
	{ 0.850651f, -0.525731f, 0.000000f }, 
	{ 0.955423f, -0.295242f, 0.000000f }, 
	{ 0.864188f, -0.442863f, 0.238856f }, 
	{ 0.951056f, -0.162460f, 0.262866f }, 
	{ 0.809017f, -0.309017f, 0.500000f }, 
	{ 0.681718f, -0.147621f, 0.716567f }, 
	{ 0.850651f, 0.000000f, 0.525731f }, 
	{ 0.864188f, 0.442863f, -0.238856f }, 
	{ 0.809017f, 0.309017f, -0.500000f }, 
	{ 0.951056f, 0.162460f, -0.262866f }, 
	{ 0.525731f, 0.000000f, -0.850651f }, 
	{ 0.681718f, 0.147621f, -0.716567f }, 
	{ 0.681718f, -0.147621f, -0.716567f }, 
	{ 0.850651f, 0.000000f, -0.525731f }, 
	{ 0.809017f, -0.309017f, -0.500000f }, 
	{ 0.864188f, -0.442863f, -0.238856f }, 
	{ 0.951056f, -0.162460f, -0.262866f }, 
	{ 0.147621f, 0.716567f, -0.681718f }, 
	{ 0.309017f, 0.500000f, -0.809017f }, 
	{ 0.425325f, 0.688191f, -0.587785f }, 
	{ 0.442863f, 0.238856f, -0.864188f }, 
	{ 0.587785f, 0.425325f, -0.688191f }, 
	{ 0.688191f, 0.587785f, -0.425325f }, 
	{ -0.147621f, 0.716567f, -0.681718f }, 
	{ -0.309017f, 0.500000f, -0.809017f }, 
	{ 0.000000f, 0.525731f, -0.850651f }, 
	{ -0.525731f, 0.000000f, -0.850651f }, 
	{ -0.442863f, 0.238856f, -0.864188f }, 
	{ -0.295242f, 0.000000f, -0.955423f }, 
	{ -0.162460f, 0.262866f, -0.951056f }, 
	{ 0.000000f, 0.000000f, -1.000000f }, 
	{ 0.295242f, 0.000000f, -0.955423f }, 
	{ 0.162460f, 0.262866f, -0.951056f }, 
	{ -0.442863f, -0.238856f, -0.864188f }, 
	{ -0.309017f, -0.500000f, -0.809017f }, 
	{ -0.162460f, -0.262866f, -0.951056f }, 
	{ 0.000000f, -0.850651f, -0.525731f }, 
	{ -0.147621f, -0.716567f, -0.681718f }, 
	{ 0.147621f, -0.716567f, -0.681718f }, 
	{ 0.000000f, -0.525731f, -0.850651f }, 
	{ 0.309017f, -0.500000f, -0.809017f }, 
	{ 0.442863f, -0.238856f, -0.864188f }, 
	{ 0.162460f, -0.262866f, -0.951056f }, 
	{ 0.238856f, -0.864188f, -0.442863f }, 
	{ 0.500000f, -0.809017f, -0.309017f }, 
	{ 0.425325f, -0.688191f, -0.587785f }, 
	{ 0.716567f, -0.681718f, -0.147621f }, 
	{ 0.688191f, -0.587785f, -0.425325f }, 
	{ 0.587785f, -0.425325f, -0.688191f }, 
	{ 0.000000f, -0.955423f, -0.295242f }, 
	{ 0.000000f, -1.000000f, 0.000000f }, 
	{ 0.262866f, -0.951056f, -0.162460f }, 
	{ 0.000000f, -0.850651f, 0.525731f }, 
	{ 0.000000f, -0.955423f, 0.295242f }, 
	{ 0.238856f, -0.864188f, 0.442863f }, 
	{ 0.262866f, -0.951056f, 0.162460f }, 
	{ 0.500000f, -0.809017f, 0.309017f }, 
	{ 0.716567f, -0.681718f, 0.147621f }, 
	{ 0.525731f, -0.850651f, 0.000000f }, 
	{ -0.238856f, -0.864188f, -0.442863f }, 
	{ -0.500000f, -0.809017f, -0.309017f }, 
	{ -0.262866f, -0.951056f, -0.162460f }, 
	{ -0.850651f, -0.525731f, 0.000000f }, 
	{ -0.716567f, -0.681718f, -0.147621f }, 
	{ -0.716567f, -0.681718f, 0.147621f }, 
	{ -0.525731f, -0.850651f, 0.000000f }, 
	{ -0.500000f, -0.809017f, 0.309017f }, 
	{ -0.238856f, -0.864188f, 0.442863f }, 
	{ -0.262866f, -0.951056f, 0.162460f }, 
	{ -0.864188f, -0.442863f, 0.238856f }, 
	{ -0.809017f, -0.309017f, 0.500000f }, 
	{ -0.688191f, -0.587785f, 0.425325f }, 
	{ -0.681718f, -0.147621f, 0.716567f }, 
	{ -0.442863f, -0.238856f, 0.864188f }, 
	{ -0.587785f, -0.425325f, 0.688191f }, 
	{ -0.309017f, -0.500000f, 0.809017f }, 
	{ -0.147621f, -0.716567f, 0.681718f }, 
	{ -0.425325f, -0.688191f, 0.587785f }, 
	{ -0.162460f, -0.262866f, 0.951056f }, 
	{ 0.442863f, -0.238856f, 0.864188f }, 
	{ 0.162460f, -0.262866f, 0.951056f }, 
	{ 0.309017f, -0.500000f, 0.809017f }, 
	{ 0.147621f, -0.716567f, 0.681718f }, 
	{ 0.000000f, -0.525731f, 0.850651f }, 
	{ 0.425325f, -0.688191f, 0.587785f }, 
	{ 0.587785f, -0.425325f, 0.688191f }, 
	{ 0.688191f, -0.587785f, 0.425325f }, 
	{ -0.955423f, 0.295242f, 0.000000f }, 
	{ -0.951056f, 0.162460f, 0.262866f }, 
	{ -1.000000f, 0.000000f, 0.000000f }, 
	{ -0.850651f, 0.000000f, 0.525731f }, 
	{ -0.955423f, -0.295242f, 0.000000f }, 
	{ -0.951056f, -0.162460f, 0.262866f }, 
	{ -0.864188f, 0.442863f, -0.238856f }, 
	{ -0.951056f, 0.162460f, -0.262866f }, 
	{ -0.809017f, 0.309017f, -0.500000f }, 
	{ -0.864188f, -0.442863f, -0.238856f }, 
	{ -0.951056f, -0.162460f, -0.262866f }, 
	{ -0.809017f, -0.309017f, -0.500000f }, 
	{ -0.681718f, 0.147621f, -0.716567f }, 
	{ -0.681718f, -0.147621f, -0.716567f }, 
	{ -0.850651f, 0.000000f, -0.525731f }, 
	{ -0.688191f, 0.587785f, -0.425325f }, 
	{ -0.587785f, 0.425325f, -0.688191f }, 
	{ -0.425325f, 0.688191f, -0.587785f }, 
	{ -0.425325f, -0.688191f, -0.587785f }, 
	{ -0.587785f, -0.425325f, -0.688191f }, 
	{ -0.688191f, -0.587785f, -0.425325f }
};

class MD2 : public Model
{
public:
	struct Header
	{
		int ID; /* magic number: "IDP2" */
		int Version; /* version: must be 8 */

		int TextureWidth; /* texture width */
		int TextureHeight; /* texture height */

		int FrameSize; /* size in bytes of a frame */

		int TextureCount; /* number of skins */
		int VertexCount; /* number of vertices per frame */
		int UVCount; /* number of texture coordinates */
		int TriangleCount; /* number of triangles */
		int GLCmdCount; /* number of opengl commands */
		int FrameCount; /* number of frames */

		int TextureOffset; /* offset skin data */
		int UVOffset; /* offset texture coordinate data */
		int TriangleOffset; /* offset triangle data */
		int FrameOffset; /* offset frame data */
		int GLCmdOffset; /* offset OpenGL command data */
		int EndOffset; /* offset end of file */
	};

	/* Texture name */
	struct TextureName
	{
		char Name[64]; /* texture file name */
	};

	/* Texture coords */
	struct UV
	{
		short X;
		short Y;
	};

	/* Triangle info */
	struct Triangle
	{
		unsigned short Vertex[3]; /* vertex indices of the triangle */
		unsigned short UV[3]; /* tex. coord. indices */
	};

	/* Compressed vertex */
	struct Vertex
	{
		unsigned char Position[3]; /* position */
		unsigned char NormalIndex; /* normal vector index */
	};

	/* Model frame */
	struct Frame
	{
		glm::vec3 Scale; /* scale factor */
		glm::vec3 Translation; /* translation vector */

		char Name[16]; /* frame name */
		Vertex Vertices[1]; /* list of frame's vertices */
	};

	MD2() = default;
	void Load(const std::string& a_sFilePath) override;

private:
	void RetrieveData(const Header& a_sHeader, std::ifstream& ifStream);
};